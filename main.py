import logging
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import gspread
from google.oauth2.service_account import Credentials
from openai import OpenAI

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("angelika-bot")

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

client = OpenAI(api_key=OPENAI_API_KEY)

# ------------------ GOOGLE SHEETS ------------------
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_info(eval(GOOGLE_CREDS_JSON), scopes=SCOPES)
gc = gspread.authorize(creds)

SHEET_NAME = "AngelikaBot"
try:
    sh = gc.open(SHEET_NAME)
except gspread.SpreadsheetNotFound:
    sh = gc.create(SHEET_NAME)
    sh.share(None, perm_type='anyone', role='writer')

try:
    worksheet = sh.worksheet("Data")
except gspread.WorksheetNotFound:
    worksheet = sh.add_worksheet(title="Data", rows=1000, cols=10)
    worksheet.append_row(["–ò–º—è", "Username", "–¢–∏–ø", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–î–∞–Ω–Ω—ã–µ"])

# ------------------ –ö–ù–û–ü–ö–ò ------------------
main_menu = ReplyKeyboardMarkup(
    [
        ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é", "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫"],
        ["üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã", "üí° FAQ"],
        ["üîì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE"]
    ],
    resize_keyboard=True
)

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–Ω–∂–µ–ª–∏–∫–∏.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "üîπ –í–æ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ RESONANCE\n"
        "üîπ –£–∑–Ω–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø\n"
        "üîπ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
    )
    await update.message.reply_text(text, reply_markup=main_menu)

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "FAQ:\n- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 11111 ‚Ç∏\n- –î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫."
    )

async def payment_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        "Kaspi: https://pay.kaspi.kz/pay/ymwm8kds\n"
        "Halyk Bank: 4405 6397 3973 4828\n"
        "Tinkoff: 2200 7008 3889 3427\n"
        "USDT (TRC20): TLhAz9G84nAdMvJtb7NoZRqCXfekDxj5rN\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫'."
    )

# ------------------ –û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê ------------------
async def send_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        worksheet.append_row([user.first_name, user.username, "–ß–µ–∫", "–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª/—Ñ–æ—Ç–æ"])
        await update.message.reply_text("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –¥–æ—Å—Ç—É–ø.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —á–µ–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# ------------------ –ó–ê–ü–ò–°–¨ –ù–ê –°–ï–°–°–ò–Æ ------------------
ASK_SESSION = range(1)

async def ask_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ —É–∫–∞–∂–∏—Ç–µ:\n1Ô∏è‚É£ –û–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω\n2Ô∏è‚É£ –£–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n3Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å"
    )
    return ASK_SESSION

async def save_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_text = update.message.text
    try:
        worksheet.append_row([user.first_name, user.username, "–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Å—Å–∏—é", user_text])
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    return ConversationHandler.END

# ------------------ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê ------------------
async def check_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username (–±–µ–∑ @), –∏ —è –ø—Ä–æ–≤–µ—Ä—é, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø."
    )

# ------------------ AI-–û–¢–í–ï–¢–´ ------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user = update.effective_user
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–Ω–∂–µ–ª–∏–∫–∏, –ø–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ RESONANCE."},
                {"role": "user", "content": user_message},
            ],
        )
        ai_text = response.choices[0].message.content.strip()
        worksheet.append_row([user.first_name, user.username, "–í–æ–ø—Ä–æ—Å", user_message])
        await update.message.reply_text(ai_text)
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")

# ------------------ –û–°–ù–û–í–ù–û–ô –ë–õ–û–ö ------------------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    session_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é"), ask_session)],
        states={ASK_SESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_session)]},
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üí° FAQ"), faq))
    app.add_handler(MessageHandler(filters.Regex("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"), payment_details))
    app.add_handler(MessageHandler(filters.Regex("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫"), send_receipt))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_photo))
    app.add_handler(session_conv)
    app.add_handler(MessageHandler(filters.Regex("üîì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE"), check_access))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
