import os
import json
import logging
import datetime
from flask import Flask
from threading import Thread
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
from openai import OpenAI

# ---------------------- #
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ---------------------- #
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

# ---------------------- #
# üßæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
# ---------------------- #
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
creds_dict = json.loads(GOOGLE_CREDS_JSON)
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
service = build("sheets", "v4", credentials=creds)

SPREADSHEET_ID = "–¢–£–¢_–í–°–¢–ê–í–¨_ID_–¢–í–û–ï–ô_–¢–ê–ë–õ–ò–¶–´"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID
SHEET_CHEQUES = "Cheques"
SHEET_SESSIONS = "Sessions"

# ---------------------- #
# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
# ---------------------- #
client = OpenAI(api_key=OPENAI_API_KEY)

# ---------------------- #
# ‚öôÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ---------------------- #
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("angelika-bot")

# ---------------------- #
# üåê Flask —Å–µ—Ä–≤–µ—Ä
# ---------------------- #
app = Flask(__name__)


@app.route("/")
def index():
    return "Angelika Resonance Bot is alive üå∏"


# ---------------------- #
# üß© –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
# ---------------------- #
def main_menu():
    buttons = [
        [KeyboardButton("üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã")],
        [KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫")],
        [KeyboardButton("üîì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE")],
        [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é")],
        [KeyboardButton("‚ÑπÔ∏è FAQ")],
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


# ---------------------- #
# üöÄ –°—Ç–∞—Ä—Ç
# ---------------------- #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–Ω–∂–µ–ª–∏–∫–∏.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "üîπ –í–æ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ RESONANCE\n"
        "üîπ –£–∑–Ω–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø\n"
        "üîπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é\n"
        "üîπ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_menu(),
    )


# ---------------------- #
# üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã
# ---------------------- #
async def show_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n"
        "Kaspi: https://pay.kaspi.kz/pay/ymwm8kds\n"
        "Halyk Bank: 4405 6397 3973 4828\n"
        "Tinkoff: 2200 7008 3889 3427\n"
        "USDT (TRC20): TLhAz9G84nAdMvJtb7NoZRqCXfekDxj5rN\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫*."
    )
    await update.message.reply_text(msg, parse_mode="Markdown")


# ---------------------- #
# ‚ÑπÔ∏è FAQ
# ---------------------- #
async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üìò *FAQ:*\n"
        "- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 11 111 ‚Ç∏\n"
        "- –î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n"
        "- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await update.message.reply_text(msg, parse_mode="Markdown")


# ---------------------- #
# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞
# ---------------------- #
async def receive_cheque(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    file_id = None

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id
    else:
        await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º.")
        return

    try:
        sheet = service.spreadsheets()
        values = [
            [
                user.username or "",
                str(user.id),
                datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                file_id,
                "–û–∂–∏–¥–∞–µ—Ç",
            ]
        ]
        sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=f"{SHEET_CHEQUES}!A:E",
            valueInputOption="RAW",
            body={"values": values},
        ).execute()
        await update.message.reply_text("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞.")


# ---------------------- #
# üîì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
# ---------------------- #
async def check_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    try:
        sheet = service.spreadsheets()
        data = (
            sheet.values()
            .get(spreadsheetId=SPREADSHEET_ID, range=f"{SHEET_CHEQUES}!A:E")
            .execute()
        )
        rows = data.get("values", [])
        for row in rows:
            if len(row) >= 5 and (row[0] == user.username or row[1] == str(user.id)):
                if row[4].lower() == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
                    await update.message.reply_text(
                        "‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ RESONANCE üí´\n"
                        "üîó [–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª](https://t.me/your_channel_invite_link)",
                        parse_mode="Markdown",
                    )
                    return
        await update.message.reply_text(
            "üö´ –î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —á–µ—Ä–µ–∑ üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫."
        )
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞.")


# ---------------------- #
# üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Å—Å–∏—é
# ---------------------- #
async def start_session_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÖ –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
        "- –û–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç;\n"
        "- –£–¥–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤—Ä–µ–º—è;\n"
        "- –í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ü–µ–ª—å –≤—Å—Ç—Ä–µ—á–∏."
    )
    context.user_data["waiting_for_session_info"] = True


async def save_session_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_session_info"):
        user = update.message.from_user
        text = update.message.text
        try:
            sheet = service.spreadsheets()
            values = [
                [
                    user.username or "",
                    str(user.id),
                    datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    text,
                    "–ù–æ–≤–∞—è",
                ]
            ]
            sheet.values().append(
                spreadsheetId=SPREADSHEET_ID,
                range=f"{SHEET_SESSIONS}!A:E",
                valueInputOption="RAW",
                body={"values": values},
            ).execute()
            await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Å—Å–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ê–Ω–∂–µ–ª–∏–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        except Exception as e:
            logger.error(e)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        context.user_data["waiting_for_session_info"] = False


# ---------------------- #
# üí¨ AI-–æ—Ç–≤–µ—Ç—ã (–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã)
# ---------------------- #
async def ai_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–Ω–∂–µ–ª–∏–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –¥—É—Ö–æ–≤–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º, —ç–∑–æ—Ç–µ—Ä–∏–∫–æ–π –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ–º."},
                {"role": "user", "content": user_text},
            ],
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")


# ---------------------- #
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------- #
def run_bot():
    app_tg = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(MessageHandler(filters.Regex("üìã"), show_payment))
    app_tg.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è"), faq))
    app_tg.add_handler(MessageHandler(filters.Regex("üì§"), receive_cheque))
    app_tg.add_handler(MessageHandler(filters.Regex("üîì"), check_access))
    app_tg.add_handler(MessageHandler(filters.Regex("üìÖ"), start_session_request))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_session_request))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_reply))

    logger.info("üöÄ Bot started successfully.")
    app_tg.run_polling()


def run_flask():
    app.run(host="0.0.0.0", port=10000)


if __name__ == "__main__":
    Thread(target=run_flask).start()
    run_bot()
