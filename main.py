import os
import logging
from dotenv import load_dotenv
from flask import Flask
from threading import Thread

from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import openai
from google.oauth2 import service_account
from googleapiclient.discovery import build


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("angelika-bot")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI ===
openai.api_key = OPENAI_API_KEY

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask (–¥–ª—è Render) ===
app = Flask(__name__)

@app.route('/')
def home():
    return "Angelika Bot is running!"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
MAIN_MENU = [
    [KeyboardButton("üí´ FAQ"), KeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã")],
    [KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫"), KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é")],
    [KeyboardButton("üîì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE")]
]
MARKUP = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)

# === Google Sheets ===
def get_sheets_service():
    creds_dict = eval(GOOGLE_CREDS_JSON)
    creds = service_account.Credentials.from_service_account_info(
        creds_dict, scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    return build("sheets", "v4", credentials=creds)


def add_to_sheet(data):
    try:
        service = get_sheets_service()
        sheet = service.spreadsheets()
        sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range="A:E",
            valueInputOption="RAW",
            body={"values": [data]},
        ).execute()
        logger.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets: %s", data)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: %s", e)


# === OpenAI-–æ—Ç–≤–µ—Ç ===
async def ask_ai(question: str) -> str:
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–∂–µ–ª–∏–∫–∏ –≤ —Å—Ñ–µ—Ä–µ –¥—É—Ö–æ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫, —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è."},
                      {"role": "user", "content": question}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI."


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–Ω–∂–µ–ª–∏–∫–∏.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "üîπ –£–∑–Ω–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE\n"
        "üîπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é\n"
        "üîπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=MARKUP
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üí´ FAQ":
        await update.message.reply_text(
            "FAQ:\n- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 11111 ‚Ç∏\n- –î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫."
        )

    elif text == "üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã":
        await update.message.reply_text(
            "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
            "Kaspi: https://pay.kaspi.kz/pay/ymwm8kds\n"
            "Halyk Bank: 4405 6397 3973 4828\n"
            "Tinkoff: 2200 7008 3889 3427\n"
            "USDT (TRC20): TLhAz9G84nAdMvJtb7NoZRqCXfekDxj5rN\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫'."
        )

    elif text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é":
        await update.message.reply_text(
            "üßò‚Äç‚ôÄÔ∏è –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Å—Å–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
            "- –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω\n"
            "- –ñ–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
            "- –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º–∞)\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–µ—Ä–µ–¥–∞–º –¥–∞–Ω–Ω—ã–µ –ê–Ω–∂–µ–ª–∏–∫–µ üí´"
        )

    elif text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫":
        await update.message.reply_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º, —è –≤—Å—ë –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é.")

    elif text == "üîì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE":
        await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –æ—Ñ–æ—Ä–º–ª—è–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é –¥–æ—Å—Ç—É–ø.")

    else:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –≤–æ–ø—Ä–æ—Å
        ai_reply = await ask_ai(text)
        await update.message.reply_text(ai_reply)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    file_id = update.message.photo[-1].file_id if update.message.photo else None
    caption = update.message.caption or ""
    add_to_sheet([user.username, "–ß–µ–∫", file_id, caption, str(update.message.date)])
    await update.message.reply_text("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    file_id = update.message.document.file_id
    caption = update.message.caption or ""
    add_to_sheet([user.username, "–§–∞–π–ª", file_id, caption, str(update.message.date)])
    await update.message.reply_text("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def run_bot():
    app_tg = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app_tg.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app_tg.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    logger.info("üöÄ Bot started successfully.")
    app_tg.run_polling()


if __name__ == "__main__":
    Thread(target=run_bot).start()
    app.run(host="0.0.0.0", port=10000)
