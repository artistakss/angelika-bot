import os
import json
import base64
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from openai import OpenAI
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from telegram import __version__ as TG_VER
import logging
logger = logging.getLogger("angelika-bot")

logger.info(f"PTB VERSION CHECK: python-telegram-bot={TG_VER}")
try:
    major = int(TG_VER.split('.')[0])
    if major < 20:
        raise RuntimeError(f"–¢—Ä–µ–±—É–µ—Ç—Å—è python-telegram-bot>=20, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {TG_VER}")
except Exception as e:
    logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PTB: {e}")
    raise
    
# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("angelika-bot")

def present(name: str) -> str:
    v = os.getenv(name)
    return f"{name}={'set' if v else 'missing'}" + (f" (len={len(v)})" if v else "")

# -------------------- –ö–û–ù–§–ò–ì --------------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "AngelikaBot")

# –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è webhook URL
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "https://angelika-bot.onrender.com")
WEBHOOK_URL = f"{WEBHOOK_BASE}/{TOKEN}"

# Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
PORT = int(os.environ.get("PORT", 10000))

logger.info("ENV CHECK: " + ", ".join([
    present("TELEGRAM_TOKEN"),
    present("OPENAI_API_KEY"),
    present("GOOGLE_CREDENTIALS"),
    present("GOOGLE_CREDENTIALS_B64"),
    present("WEBHOOK_BASE"),
    present("PORT"),
]))

# -------------------- –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ù–´–• ENV --------------------
if not TOKEN:
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç; –æ—Ç–≤–µ—Ç—ã AI –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# -------------------- –ö–õ–ò–ï–ù–¢–´ --------------------
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# Google Sheets: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî JSON —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ base64
gc = None
raw_json = os.getenv("GOOGLE_CREDENTIALS")
raw_b64 = os.getenv("GOOGLE_CREDENTIALS_B64")

if raw_json or raw_b64:
    try:
        if raw_b64 and not raw_json:
            decoded = base64.b64decode(raw_b64).decode("utf-8")
            creds_dict = json.loads(decoded)
        else:
            creds_dict = json.loads(raw_json)
        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gc = gspread.authorize(creds)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
else:
    logger.warning("GOOGLE_CREDENTIALS/GOOGLE_CREDENTIALS_B64 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã; –∑–∞–ø–∏—Å—å –≤ Sheets –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

# -------------------- HANDLERS --------------------
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é", callback_data="session")],
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="check")],
        [InlineKeyboardButton("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã", callback_data="requisites")],
        [InlineKeyboardButton("üìò FAQ", callback_data="faq")],
        [InlineKeyboardButton("üîì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ RESONANCE", callback_data="access")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–Ω–∂–µ–ª–∏–∫–∏.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "üîπ –í–æ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ RESONANCE\n"
        "üîπ –£–∑–Ω–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø\n"
        "üîπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_buttons(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "faq":
        text = "FAQ:\n- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 11 111 ‚Ç∏\n- –î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫."
    elif query.data == "requisites":
        text = (
            "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
            "Kaspi: https://pay.kaspi.kz/pay/ymwm8kds\n"
            "Halyk Bank: 4405 6397 3973 4828\n"
            "Tinkoff: 2200 7008 3889 3427\n"
            "USDT (TRC20): TLhAz9G84nAdMvJtb7NoZRqCXfekDxj5rN\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫'."
        )
    elif query.data == "session":
        text = (
            "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Å—Å–∏—é –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "- –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω\n"
            "- –ñ–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
            "- –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏\n\n"
            "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ê–Ω–∂–µ–ª–∏–∫–µ ‚ù§Ô∏è"
        )
    elif query.data == "check":
        text = "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É."
    elif query.data == "access":
        text = (
            "üîì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ RESONANCE:\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π email –∏–ª–∏ –∏–º—è –≤ Telegram, "
            "–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞."
        )
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    await query.edit_message_text(text)

async def handle_message(update: Update, context):
    user_text = update.message.text or ""
    if not client:
        await update.message.reply_text("AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–∂–µ–ª–∏–∫–∏, –æ–±—ä—è—Å–Ω—è–π —Å–ø–æ–∫–æ–π–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ."},
                {"role": "user", "content": user_text},
            ]
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_photo(update: Update, context):
    try:
        file = await update.message.photo[-1].get_file()
        file_url = file.file_path
        user = update.message.from_user

        if gc:
            sh = gc.open(GOOGLE_SHEET_NAME).sheet1
            sh.append_row([str(user.id), user.username or "", file_url, "–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω"])
            await update.message.reply_text("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É.")
        else:
            await update.message.reply_text("‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ß–µ–∫ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —á–µ–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —á–µ–∫–∞.")

# -------------------- –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø --------------------
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_buttons))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# -------------------- –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê PTB --------------------
if __name__ == "__main__":
    logger.info(f"üöÄ Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ webhook: {WEBHOOK_URL}")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL,
    )
